#!/usr/bin/env zsh
# vim: set ft=sh:
# shellcheck disable=SC2034
typeset -a BREW_TAPS
typeset -a BREW_CASKS
typeset -a BREW_PACKAGES

BREW_TAPS=(
	universal-ctags/universal-ctags
)

BREW_PACKAGES=(
	bat
	colima
	coreutils
	direnv
	docker
	docker-compose
	docker-credential-helper
	dust
	exa
	exiftool
	ffmpeg
	findutils
	fzf
	git
	git-delta
	gnu-tar
	gsed
	imagemagick
	jhead
	jq
	jump
	node
	node-build
	oath-toolkit
	openconnect
	openssl
	pstree
	python@3.11
	readline
	ripgrep
	ruby-build
	rustup-init
	selene
	shellcheck
	shfmt
	sqlite
	stylua
	syncthing
	tig
	watch
	wireguard-tools
	yamllint
	yt-dlp
	zsh
)

BREW_CASKS=(
	android-platform-tools # adb
	aws-vault              # AWS cred management
	disk-inventory-x       # Find large files
	gpg-suite              # PGP
	hammerspoon            # Control the mac via lua
	iterm2                 # Terminal
	itsycal                # Small menubar calendar
	kap                    # Screen video recorder
	keepassxc              # Passwords
	macvim                 # Editor
	namechanger            # File renamer GUI
	qlimagesize            # QuickLook Plugin: Image Info
	qlmarkdown             # Quicklook Plugin: Markdown
	quicklook-json         # Quicklook Plugin: JSON
	shottr                 # Menubar screenshot utility
	the-unarchiver         # Unpack all archive types
	typora                 # Markdown editor
	vlc                    # Video player
)

NODE_PACKAGES=(
	eslint
	jsonlint
	pnpm
	prettier
)

RUBY_GEMS=(
	pry-byebug
	wirb
)

#
# Actual code
#
script_dir=$(cd "$(dirname "${BASH_SOURCE[0]:-$0}")" &>/dev/null && pwd -P)
. "$script_dir/../modules/pure_prompt/async.zsh"

setup_colors() {
	if [[ -t 2 ]] && [[ -z "${NO_COLOR-}" ]] && [[ "${TERM-}" != "dumb" ]]; then
		NOFORMAT='\033[0m' RED='\033[0;31m' GREEN='\033[0;32m' ORANGE='\033[0;33m' BLUE='\033[0;34m' PURPLE='\033[0;35m' CYAN='\033[0;36m' YELLOW='\033[1;33m'
	else
		NOFORMAT='' RED='' GREEN='' ORANGE='' BLUE='' PURPLE='' CYAN='' YELLOW=''
	fi
}

msg() {
	echo >&2 -e "${1-}"
}

info() {
	msg "${YELLOW}$@${NOFORMAT}"
}

setup_colors
async_init

typeset -g COMPLETED=0
typeset -g WAIT_UNTIL_COMPLETED=0

update_completed_callback() {
	local job=$1 code=$2 output=$3
	COMPLETED=$((COMPLETED + 1))
	info "--------------------------------- > Job: $1 ----------------------------------"
	msg "$3"
	info "--------------------------------- < Job: $1 ----------------------------------"
}

update_zsh_config() {
	info ">>> Updating zsh_config"
	[ -e ~/dev/config/zsh_config ] && cd ~/dev/config/zsh_config && git pull --rebase --autostash
}

update_vim_config() {
	info ">>> Updating zsh_config"
	[ -e ~/dev/config/vim_config ] && cd ~/dev/config/vim_config && git pull --rebase --autostash
}

install_missing_brew_formulas() {
	info ">>> Installing brew formulas"
	# Check installed packages
	INSTALLED=$(brew list --formula -1 | tr '\n' ' ')
	for p in "${BREW_PACKAGES[@]}"; do
		if [[ "${INSTALLED}" != *$p* ]]; then
			brew install "${p}" || true
		fi
	done
}

install_missing_brew_casks() {
	info ">>> Installing brew casks"
	# Check install casks
	INSTALLED=$(brew list --casks -1 | tr '\n' ' ')
	for p in "${BREW_CASKS[@]}"; do
		if [[ "${INSTALLED}" != *$p* ]]; then
			brew install --cask "${p}" || true
		fi
	done
}

install_missing_brew_special_cases() {
	info ">>> Installing brew special cases"
	if ! brew ls --versions universal-ctags; then
		brew install --fetch-HEAD --HEAD universal-ctags
	fi
}

update_rubygems() {
	info ">>> Updating rubygems"
	gem update --system
}

update_gems() {
	info ">>> Updating rubygems"
	gem install "${RUBY_GEMS[@]}"
}

update_js_tools() {
	info ">>> Installing important JS tools into node at $(which node)"
	for p in "${NODE_PACKAGES[@]}"; do
		npm install -g "${p}"
	done
}

install_special_cases() {
	info ">>> Installing special tools"
	if ! hash ruplacer 2>/dev/null; then
		info ">>> Installing ruplacer from github releases"
		curl -L -q -s -o "$HOMEBREW_PREFIX/bin/ruplacer" "$(curl -s https://api.github.com/repos/your-tools/ruplacer/releases/latest | jq -r ".assets[] | select(.name | test(\"osx\")) | .browser_download_url")" && chmod +x "$HOMEBREW_PREFIX/bin/ruplacer"
	fi

	if ! hash kdiff3 2>/dev/null; then
		info ">>> Installing kdiff3 from source (This will take some time)"
		brew tap kde-mac/kde https://invent.kde.org/packaging/homebrew-kde.git --force-auto-update
		brew install kde-mac/kde/kdiff3 --HEAD
	fi
}

# update homebrew taps
for tap in $BREW_TAPS; do
	[[ ! $installed_taps =~ $tap ]] && brew tap "$tap"
done

async_start_worker update_worker -n -u
async_register_callback update_worker update_completed_callback

info ">>> Async updating zsh_config"
WAIT_UNTIL_COMPLETED=$((WAIT_UNTIL_COMPLETED + 1))
async_job update_worker update_zsh_config

info ">>> Async updating vim_config"
WAIT_UNTIL_COMPLETED=$((WAIT_UNTIL_COMPLETED + 1))
async_job update_worker update_vim_config

info ">>> Async installing missing homebrew packages"
WAIT_UNTIL_COMPLETED=$((WAIT_UNTIL_COMPLETED + 1))
async_job update_worker install_brew_formulas

info ">>> Async updating homebrew"
WAIT_UNTIL_COMPLETED=$((WAIT_UNTIL_COMPLETED + 3))
async_job update_worker install_missing_brew_formulas
async_job update_worker install_missing_brew_casks
async_job update_worker install_missing_brew_special_cases

# Wait for the two tasks to be completed
COUNTER=1
while ((COMPLETED < $WAIT_UNTIL_COMPLETED)); do
	msg "${GREEN}Waiting for async jobs to finish (#${COUNTER}, Finished: $COMPLETED/$WAIT_UNTIL_COMPLETED)${NOFORMAT}"
	COUNTER=$((COUNTER + 1))
	sleep 5
done

info ">>> Updating homebrew formulas/casks"
brew upgrade

info ">>> Async updating tools (ruby/js)"
WAIT_UNTIL_COMPLETED=4
async_job update_worker update_rubygems
async_job update_worker update_gems
async_job update_worker update_js_tools
async_job update_worker install_special_cases

#
# Second wait after potentially new programming language versions have been installed
#
COMPLETED=0
COUNTER=1
while ((COMPLETED < $WAIT_UNTIL_COMPLETED)); do
	msg "${GREEN}Waiting for async jobs to finish (#${COUNTER}, Finished: $COMPLETED/$WAIT_UNTIL_COMPLETED)${NOFORMAT}"
	COUNTER=$((COUNTER + 1))
	sleep 5
done

info ">>> Setting permission for quicklook plugins"
/usr/bin/xattr -r ~/Library/QuickLook >/dev/null
/usr/bin/xattr -d -r com.apple.quarantine ~/Library/QuickLook >/dev/null

# if [ -d /Applications/Microsoft\ Teams.app ]; then
#   if 2>/dev/null 1>&2 codesign --verify "/Applications/Microsoft Teams.app"; then
#     log ">>> Removing code signage from MS Teams for virtual cams to work"
#     sudo codesign --remove-signature "/Applications/Microsoft Teams.app"
#     sudo codesign --remove-signature "/Applications/Microsoft Teams.app/Contents/Frameworks/Microsoft Teams Helper.app"
#     sudo codesign --remove-signature "/Applications/Microsoft Teams.app/Contents/Frameworks/Microsoft Teams Helper (GPU).app"
#     sudo codesign --remove-signature "/Applications/Microsoft Teams.app/Contents/Frameworks/Microsoft Teams Helper (Renderer).app"
#     sudo codesign --remove-signature "/Applications/Microsoft Teams.app/Contents/Frameworks/Microsoft Teams Helper (Plugin).app"
#   fi
# fi
#

async_stop_worker update_worker
