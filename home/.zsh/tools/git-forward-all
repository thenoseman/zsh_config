#!/bin/bash
# vim: set ft=bash:

EPERM=1
ENOENT=2
EEXIST=17

curref=$(git symbolic-ref HEAD 2>&-)
NOFORMAT='\033[0m' RED='\033[0;31m' GREEN='\033[0;32m' ORANGE='\033[0;33m' BLUE='\033[0;34m' PURPLE='\033[0;35m' CYAN='\033[0;36m' YELLOW='\033[1;33m'

fetch_all() {
  git fetch --all
  ret=$?
  [ "$ret" -eq 0 ] || {
    return "$ret"
  }
}

fast_forward_all() {
  ret=0

  while read -r line; do
    branch=$(echo "$line" | cut -c 8- | rev | cut -c 8- | rev)
    remote=$(git config --local --get "branch.$branch.remote")
    upstream=$(git config --local --get "branch.$branch.merge" | cut -c 12-)

    if ! git rev-parse --verify --quiet "$remote/$upstream" 1>&- 2>&-; then
      ret=$(( $ret | $ENOENT ))
      echo "Branch $branch"
      echo -e "${YELLOW}  skipped: upstream is absent${NOFORMAT}"
      continue
    fi

    if [ -z "$(git log --oneline -1 "$branch..$remote/$upstream")" ]; then
      continue
    fi

    echo "Branch $branch"

    if [ -n "$(git log --oneline -1 "$remote/$upstream..$branch")" ]; then
      echo -e "${YELLOW}  skipped: diverged${NOFORMAT}"
      ret=$(( $ret | $EPERM ))
      continue
    fi

    if [ "refs/heads/$branch" = "$curref" ]; then
      git merge --ff-only "$remote/$upstream" 1>&- 2>&-
    else
      git update-ref "refs/heads/$branch" "$remote/$upstream" 1>&- 2>&-
    fi
    echo -e "${GREEN}  fast-forwarded${NOFORMAT}"
  done < <(git config --local --name-only --get-regex '^branch.*remote$')

  return "$ret"
}

fetch_all
excode=$?
[ "$excode" -eq 0 ] || {
  exit "$excode"
}

if output=$(git status --porcelain) && [ -n "$output" ]; then
  echo "Skipped: repo is not clean"
  exit $EEXIST
fi

fast_forward_all
excode=$?
[ "$excode" -eq 0 ] || {
  exit "$excode"
}
