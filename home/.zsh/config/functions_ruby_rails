# vim:ft=sh

# bundle me happy
b() {
  bundle "$@"
}

# run rspec via spring
rspec() {
  if [ -f ./bin/rspec ]; then
    bin/rspec "$@"
  else
    bundle exec rspec "$@"
  fi
}

killruby() {
  kill -9 $(ps | grep puma | awk '{print $1}' | head -n 1) || true
  kill -9 $(ps | grep ruby | awk '{print $1}' | head -n 1)
}

# vim:ft=sh
# Rails console
rc() { 
  rails console
}

# Rails server
rs() { 
  bundle exec rails server -u puma
}

# Rails server (SSL)
# rssl dev.local -> Cert for *.dev.local
# rssl           -> Cert for localhost
rssl() {
  local DOMAIN="${1:=localhost}"
  local PORT="${2:=3000}"

  # Check Gemfile existance
  [ ! -e "Gemfile" ] && echo "This can only be run with a Gemfile" && return

  # Check for PUMA
  grep -q puma Gemfile.lock
  [[ "$?" == "1" ]] && echo "Please add the 'puma' gem to your Gemfile and try again."

  puma_path=$(bundle show puma)

  # Check for SSL in puma
  grep -q SSL ${puma_path}/ext/puma_http11/Makefile
  if [[ "$?" != "0" ]]; then
    echo "${ccred}"
    echo "Your puma installation is compiled without SSL support."
    echo "To fix that:"
    echo "1. uninstall the puma gem (at least the one in ${puma_path})"
    echo "2. brew install openssl"
    echo "3. execute 'bundle config build.puma --with-opt-dir=/usr/local/opt/openssl'"
    echo "4. bundle"
    echo "${ccend}"
    return
  fi

  # Check for cert/key
  # Generate a certificate
  if [ ! -e "/tmp/ssl_dev_keys/ssl_dev.key" ]; then
    echo "Creating certificate for ${DOMAIN}"
    wild_domain="*.${DOMAIN}"
    if [[ "${DOMAIN}" == "localhost" ]]; then
      wild_domain="localhost"
    fi

    [ ! -e /tmp/ssl_dev_keys ] && mkdir -p /tmp/ssl_dev_keys

    # Create a modified openssl conf which allows SANs (https://grevi.ch/blog/ssl-certificate-request-with-subject-alternative-names-san)
    # With this https://dev will be possible (see https://www.openssl.org/docs/manmaster/apps/x509v3_config.html for more)
    # Of cause dev must point to 127.0.0.1 via /etc/hosts
    echo "distinguished_name = req\n[ req ]\nreq_extensions = san\n[ san ]\nbasicConstraints = CA:FALSE\nkeyUsage = nonRepudiation, digitalSignature, keyEncipherment\nsubjectAltName = @alt_names\n[alt_names]\nDNS.1=dev.local\nDNS.2=localhost\nDNS.3=*.dev.local\nIP.1=127.0.0.1\n" > /tmp/ssl_dev_keys/openssl.cnf

    # Generate a private key
    openssl genrsa -des3 -out /tmp/ssl_dev_keys/ssl_dev.key -passout pass:password 2048
    # Remove password from key (for server)
    openssl rsa -in /tmp/ssl_dev_keys/ssl_dev.key -passin pass:password -out /tmp/ssl_dev_keys/ssl_dev.key
    # Chreate certificate
    openssl req -sha256 -new -key /tmp/ssl_dev_keys/ssl_dev.key \
      -config '/tmp/ssl_dev_keys/openssl.cnf' \
      -passin pass:password \
      -out /tmp/ssl_dev_keys/ssl_dev.csr \
      -subj "/C=DE/ST=Hamburg/L=Hamburg/O=nextversion/OU=IT Department/CN=${wild_domain}"
    # Sign certificate
    openssl x509 \
      -req \
      -days 365 \
      -in "/tmp/ssl_dev_keys/ssl_dev.csr" \
      -signkey "/tmp/ssl_dev_keys/ssl_dev.key" \
      -out "/tmp/ssl_dev_keys/ssl_dev.crt" \
      -passin pass:password \
      -extensions san
    # Create PEM for import
    cat /tmp/ssl_dev_keys/ssl_dev.crt /tmp/ssl_dev_keys/ssl_dev.key > /tmp/ssl_dev_keys/ssl_dev.pem

    echo "${ccgreen}"
    echo "Generated a certificate authority and server key in /tmp/ssl_dev_keys/"
    echo "Please note that this certificate is only valid for ${wild_domain}"
    echo "Go ahead and add '127.0.0.1 your.${DOMAIN} another.${DOMAIN}' to /etc/hosts (Only if not using 'localhost')"
    echo ""
    echo "To keep the browser from displaying the 'untrusted certificate' warning"
    echo "please import ${ccyellow}/tmp/ssl_dev_keys/ssl_dev.pem${ccgreen} into your Macs keychain."
    echo ""
    echo "The Mac keychain will open when you continue. Choose 'System' from the dropdown and import the certificate."
    echo "After importing please open the certificate (double click) and choose 'Always trust' from the first dropdown INSIDE the 'Trust' section."
    echo "${ccend}"
    echo "Press any key to continue ..."
    read
    open /tmp/ssl_dev_keys/ssl_dev.pem 
    echo "Press any key to continue ..."
  fi

  bundle exec rails server puma -b "ssl://0.0.0.0:${PORT}?key=/tmp/ssl_dev_keys/ssl_dev.key&cert=/tmp/ssl_dev_keys/ssl_dev.crt"
}

# vim:ft=sh
