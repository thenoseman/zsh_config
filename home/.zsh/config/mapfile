# vim: set ft=sh:
# If 'mapfile' is not available, offer it as a step-in function
# Written as an attempt at http://wiki.bash-hackers.org/commands/builtin/mapfile?s[]=mapfile#to_do
#   "Create an implementation as a shell function that's portable between Ksh, Zsh, and Bash 
#    (and possibly other bourne-like shells with array support)."
#    
# Potentially useful resources: 
# http://cfajohnson.com/shell/arrays/
# https://stackoverflow.com/a/32931403

# Known issue: No traps!  This means IFS might be left altered if 
# the function is cancelled or fails in some way

if ! command -v mapfile >/dev/null 2>&1; then
  # This is simply the appropriate section of 'help mapfile', edited, as a function:
  mapfilehelp() {
    # Hey, this exercise is for an array-capable shell, so let's use an array for this!
    # This gets around the mess of heredocs and tabbed indentation

    # shellcheck disable=SC2054,SC2102
    local mapfileHelpArray=(
    "mapfile [-n count] [-s count] [-t] [-u fd] [array]"
    "readarray [-n count] [-s count] [-t] [-u fd] [array]"
    ""
    "      Read  lines  from the standard input into the indexed array variable ARRAY, or"
    "      from file descriptor FD if the -u option is supplied.  The variable MAPFILE"
    "      is the default ARRAY."
    ""
    "      Options:"
    "        -n     Copy at most count lines.  If count is 0, all lines are copied."
    "        -s     Discard the first count lines read."
    "        -t     Nothing.  This option is here only for drop-in compatibility"
    "               'mapfile' behaviour without '-t' cannot be replicated, '-t' is almost"
    "               always used, so we provide this dummy option for convenience"
    "        -u     Read lines from file descriptor FD instead of the standard input."
    ""
    "      If not supplied with an explicit origin, mapfile will clear array before assigning to it."
    ""
    "      mapfile returns successfully unless an invalid option or option argument is supplied," 
    "      ARRAY is invalid or unassignable, or if ARRAY is not an indexed array."
    )
    printf '%s\n' "${mapfileHelpArray[@]}"
  }

  mapfile() {
    local elementCount elementDiscard fileDescr arrIndex readOpt MAPFILE
    # Handle our various options
    while getopts ":hn:s:tu:" flags; do
      case "${flags}" in
        (h) mapfilehelp; return 0;;
        (n) elementCount="${OPTARG}";;
        (s) elementDiscard="${OPTARG}";;
        (t) :;; #Only here for compatibility
        (u) fileDescr="${OPTARG}";;
        (*) mapfilehelp; return 1;;
      esac
    done
    shift "$(( OPTIND - 1 ))"

    # Note: $SHELL is not a reliable test, but in this case it should be ok
    # e.g. from 'bash', run 'zsh'.  echo $SHELL = /bin/bash. i.e. parent proc.
    # elementStart isn't used, it's here in case someone wants to add '-O'
    case "$SHELL" in
      (*ksh)    arrIndex="${elementStart:-0}"
                readOpt="-A"
                ;;
      (*zsh)    arrIndex="${elementStart:-1}"
                readOpt="-A"
                ;;
      (*bash|*) arrIndex="${elementStart:-0}"
                readOpt="-a"
                ;;
    esac

    oldIFS="$IFS" # Capture IFS so that we can set it back
    IFS=$'\n'     # Temporarily set IFS to newlines
    set -f        # Turn off globbing
    set +H        # Prevent parsing of '!' via history substitution

    # If a linecount is set, we build the array element by element
    if [ -n "${elementCount}" ] && (( elementCount > 0 )); then
      # First, if we're discarding elements:
      if [ -n "${elementDiscard}" ]; then
        for ((i=0;i<elementDiscard;i++)); do
          read -r
          echo "${REPLY}" >/dev/null 2>&1
        done
      fi
      # Next, read the input stream into MAPFILE
      i="${arrIndex}"
      while (( i < elementCount )); do
        read -r
        MAPFILE+=( "${REPLY}" )
        (( i++ ))
      done
    # Otherwise we just read the whole lot in
    else
      read -d '' -r "${readOpt}" MAPFILE

      # If elementDiscard is declared, then we can quickly reindex like so:
      if [ -n "${elementDiscard}" ]; then
        MAPFILE=( "${MAPFILE[@]:$elementDiscard}" )
      fi
    fi <&"${fileDescr:-0}"

    # Finally, rename the array if required
    # I would love to know a better way to handle this
    if [ -n "$1" ]; then
      # shellcheck disable=SC2034
      for element in "${MAPFILE[@]}"; do
        eval "$1+=( \"\${element}\" )"
      done
    fi

    # Set IFS etc back to normal
    IFS="${oldIFS}"
    set +f
    set -H
  }
  # And finally alias 'readarray'
  alias readarray='mapfile'
fi
