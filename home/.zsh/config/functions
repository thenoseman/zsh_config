# vim:ft=sh
# shellcheck disable=SC2145,SC2154,SC3010,SC3043,SC3033

#
# Find a file starting with $1
#
f() {
  rg --hidden -g 'node_modules' --files -g "*${@}*" | grep --color "${@}"
}

#
# Start tig in status view if unstanged changes present
#
ti() {
  DIRTY=$(git status -s)
  killall -m -9 tig > /dev/null 2>&1
  if [[ "$DIRTY" != "" ]]; then
    tig status
  else
    tig "$@"
  fi
}

#
# Do a command in every subdir (max depth = 1)
#
dirdo() {
  echo "${ccyellow}Executing '${@}' in every subdirectory${ccend}"
  for a in *; do
    if [[ -d "$a" ]]; then
      cd "$a" || exit
      # [[ -f .ruby-version ]] && chruby $(cat .ruby-version)
      echo "${ccyellow}$(pwd)${ccend} ('${@}')"
      ("$@")
      cd ..
    fi
  done
}

#
# Install ruby version
#
install_ruby() {
  local VERSION="${1:-}"
  [[ -z "$VERSION" ]] && echo "Pass the ruby version (eg. activate_ruby 3.0.0)" && return
  if [[ ! -d "$HOME/.rubies/${VERSION}" ]]; then
    echo "ruby version ${VERSION} not found. Installing."
    ruby-build "${VERSION}" "$HOME/.rubies/${VERSION}"
  fi
}

#
# Javascript testing with jest
#
wjs-test() {
  node_modules/.bin/jest --clearCache
  node_modules/.bin/jest --watch --runInBand "$(rg --files --hidden --follow --glob 'tests/unit/**/*.spec.js' | fzf -1 -q "${1}")"
}

djs-test() {
  NODE_OPTIONS="--inspect" node_modules/.bin/jest --runInBand "$(rg --files --hidden --follow --glob '*.spec.js' --glob '*.scene.js' | fzf -1 -q "${1}")"
}

#
# AWS related functions
#
aws_list_ec2_instances() {
  [[ -z "$AWS_VAULT_PROFILE" ]] && echo "set 'AWS_VAULT_PROFILE' before use" && return
  aws ec2 describe-instances  --filters 'Name=instance-state-name,Values=running' \
                            --query "$(cat <<-EOF | tr -d '\n' | tr -d ' '
                                    Reservations[*].{
                                        deets:Instances[*].[
                                            (not_null(Tags[?Key==\`Name\`][].Value)[0]||\`_\`),
                                            InstanceId,
                                            LaunchTime,
                                            PrivateDnsName
                                        ][]
                                    }
																		EOF
                                )" \
                            --output json \
                                | jq -r '.[]|.deets|join(" ")' \
                                | column -t -s " "
}

#
# AWS: SSH to an EC2 instance
#
aws-ssh() {
  ssh "$(aws_list_ec2_instances | fzf -1 -q "$1" | awk '{print $4}')"
}

#
# TERRAFORM: Targeted plan using @flojs amazing tfrs
#
tf-p() {
  # shellcheck disable=SC2046
  aws-vault-wrapper /usr/local/bin/terraform plan -out plan.out -lock-timeout=5m -compact-warnings $(tfrs --depth 3 --list | fzf -m -q "$1" --bind esc:clear-query | sed -e 's#^#-target #')
}

#
# DOCKER
#
mk-start() {
  minikube start --container-runtime=docker --no-kubernetes --driver=hyperkit
}

mk-stop() {
  minikube stop
}

mk-e() {
  eval "$(minikube -p minikube docker-env)"
}
