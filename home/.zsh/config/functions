# vim:ft=sh
# shellcheck disable=SC2145,SC2154,SC3010,SC3043,SC3033

#
# Find a file starting with $1
#
f() {
	rg --hidden --files | grep --color "${@}"
}

#
# Start tig in status view if unstanged changes present
#
ti() {
	DIRTY=$(git status -s)
	killall -m -9 tig >/dev/null 2>&1
	if [[ "$DIRTY" != "" ]]; then
		tig status
	else
		tig "$@"
	fi
}

#
# Do a command in every subdir (max depth = 1)
#
dirdo() {
	echo "${ccyellow}Executing '${@}' in every subdirectory${ccend}"
	for a in *; do
		if [[ -d "$a" ]]; then
			cd "$a" || exit
			# [[ -f .ruby-version ]] && chruby $(cat .ruby-version)
			echo "${ccyellow}$(pwd)${ccend} ('${@}')"
			("$@")
			cd ..
		fi
	done
}

#
# Install ruby version
#
install_ruby() {
	local VERSION="${1:-}"
	[[ -z "$VERSION" ]] && echo "Pass the ruby version (eg. activate_ruby 3.0.0)" && return
	if [[ ! -d "$HOME/.rubies/${VERSION}" ]]; then
		echo "ruby version ${VERSION} not found. Installing."
		ruby-build "${VERSION}" "$HOME/.rubies/${VERSION}"
	fi
}

#
# Install a node version
#
install_node() {
	[[ -z "$1" ]] && echo "Pass a matcher for the node version you want" && return
	NODE_VERSION=$(node-build --definitions | grep -E "^[0-9.]+$" | semversort | fzf -1 --query "^$1" -e --no-sort --tac)
	node-build "$NODE_VERSION" "$HOME/.nodes/$NODE_VERSION"
}

#
# Install a specified terraform version into $HOMEBREW_PREFIX as "terraform-<version>"
#
install_terraform() {
	[[ -z "$1" ]] && echo "Pass a matcher for the terraform version you want" && return
	VERSION=$(curl -qs "https://releases.hashicorp.com/terraform" | grep "/terraform/1" | sed "s|.*terraform_||g" | sed "s|<.*||g" | grep -v -E "beta|alpha|rc" | semversort | fzf -1 --query "^$1" -e --no-sort --tac)
	# https://releases.hashicorp.com/terraform/1.5.0/terraform_1.5.0_darwin_amd64.zip
	URL="https://releases.hashicorp.com/terraform/${VERSION}/terraform_${VERSION}_darwin_${ARCH}.zip"
	TARGET="$HOMEBREW_PREFIX/bin/terraform-${VERSION}"
	echo "Installing version ${VERSION} to ${TARGET} ($URL)"
	curl -# -L -o "/tmp/tf-version.zip" "$URL"
	(
		cd /tmp || exit 1
		unzip -q tf-version.zip
		chmod +x terraform
		mv terraform "$TARGET"
	)
	"$TARGET" -version
}

#
# Javascript testing with jest
#
wjs-test() {
	node_modules/.bin/jest --clearCache
	# shellcheck disable=SC2046
	node_modules/.bin/jest --watch --runInBand $(rg --files --hidden --follow --glob 'test*/unit/**/*.{spec,test}.{ts,js}' | fzf -m --select-1 --query "${1}" | tr "\n" " ")
}

#
# Run a test in debugging mode
#
djs-test() {
	NODE_OPTIONS="--inspect --inspect-brk" node_modules/.bin/jest --runInBand "$(rg --files --hidden --follow --glob 'test*/unit/**/*.{spec,test}.{ts,js}' | fzf -1 -q "${1}")"
}

#
# Start node in debugger mode
# if the command line include ".ts" it is assumed to run under tsnode-dev
#
node-d() {
	export NODE_OPTIONS="--inspect --inspect-brk"
	NODE_BIN="node"
	if [[ "$*" == *".ts"* ]]; then
		NODE_BIN="ts-node-dev -r tsconfig-paths/register --rs"
	fi
	echo "> $NODE_BIN $@"
	"$NODE_BIN" "$@"
}

#
# Runs a cypress test headless
#
cyp-headless() {
	cypress run --e2e --browser chrome --headless --reporter cypress-mochawesome-reporter --reporter-options 'showPassed=false,charts=true' --no-exit --spec "$(rg --files --hidden --follow --glob '*.cy.js' tests/e2e | fzf -1 -q "${1}")"
}

#
# Runs a cypress test with visible browser
#
cyp() {
	cypress run --e2e --browser chrome --headed --reporter cypress-mochawesome-reporter --reporter-options 'showPassed=false,charts=true' --no-exit --spec "$(rg --files --hidden --follow --glob '*.cy.js' tests/e2e | fzf -1 -q "${1}")"
}

#
# AWS related functions
#
aws_list_ec2_instances() {
	[[ -z "$AWS_PROFILE" ]] && echo "set 'AWS_PROFILE' before use" && return
	aws ec2 describe-instances --filters 'Name=instance-state-name,Values=running' \
		--query "$(
			cat <<-EOF | tr -d '\n' | tr -d ' '
				                                    Reservations[*].{
				                                        deets:Instances[*].[
				                                            (not_null(Tags[?Key==\`Name\`][].Value)[0]||\`_\`),
				                                            InstanceId,
				                                            LaunchTime,
				                                            PrivateDnsName
				                                        ][]
				                                    }
			EOF
		)" \
		--output json |
		jq -r '.[]|.deets|join(" ")' |
		column -t -s " "
}

#
# TERRAFORM: Targeted plan using @floj amazing tfrs (https://github.com/floj/tfrs)
#
# tfrs is a universal binary build like this:
# GOOS=darwin GOARCH=arm64 go build -v -o tfrs-arm64 .
# GOOS=darwin GOARCH=amd64 go build -v -o tfrs-amd64 .
# lipo -create -output tfrs tfrs-arm64 tfrs-amd64
#

# PLAN using locat source code / modules
tf-p() {
	# shellcheck disable=SC2046
	aws-vault-wrapper "$HOMEBREW_PREFIX/bin/terraform" plan -out plan.out -lock-timeout=5m -compact-warnings $(tfrs --depth 3 --list | fzf -m -q "$1" --bind esc:clear-query | sed -e 's#^#-target #')
}

# PLAN using the actual pulled TF state
tf-p-state() {
	# shellcheck disable=SC2046
	aws-vault-wrapper "$HOMEBREW_PREFIX/bin/terraform" plan -out plan.out -lock-timeout=5m -compact-warnings $(tfrs --depth 3 --list --use-state terraform state list | fzf -m -q "$1" --bind esc:clear-query | sed -e 's#^#-target #')
}

# PLAN for a "terraform destroy"
tf-p-destroy() {
	# shellcheck disable=SC2046
	aws-vault-wrapper "$HOMEBREW_PREFIX/bin/terraform" plan -out plan.out -destroy -lock-timeout=5m -compact-warnings $(tfrs --depth 3 --list | fzf -m -q "$1" --bind esc:clear-query | sed -e 's#^#-target #')
}

killdns() {
	sudo dscacheutil -flushcache
	sudo killall -HUP mDNSResponder
	sudo brew services restart coredns
}

#
# Citrix autostart annoyance
#
citrix-remove-services() {
	launchctl remove com.citrix.ServiceRecords
	launchctl remove com.citrix.ReceiverHelper
	launchctl remove com.citrix.AuthManager_Mac
	launchctl remove com.citrix.safariadapter
}
citrix-start-services() {
	launchctl load /Library/LaunchAgents/com.citrix.ServiceRecords.plist
	launchctl load /Library/LaunchAgents/com.citrix.ReceiverHelper.plist
	launchctl load /Library/LaunchAgents/com.citrix.AuthManager_Mac.plist
}

#
# DIRENV
#
direnv_java() {
	# shellcheck disable=SC3037,SC2028,SC2086
	echo -n "source_up\nexport JAVA_HOME=\"$(/usr/libexec/java_home -v ${1}:-17)\"\nexport MAVEN_OPTS=\"-Xms512m -Xmx1024m -Dfile.encoding=UTF-8\"" >>.envrc
	cat .envrc
	direnv allow
}

direnv_node() {
	# shellcheck disable=SC3037,SC2028,SC2086
	echo -n "source_up\nuse node ${1:-21}" >>.envrc
	cat .envrc
	direnv allow
}

#
# docker
#
d-rmi() {
	# shellcheck disable=SC2046
	docker rmi --force $(docker images --no-trunc --format '{{.Repository}}:{{.Tag}}' | fzf -m -q "${1:-}" --bind esc:clear-query)
}

# Draws a simple box
# ┌─┐╔═╗╭─╮
# │ │║ ║│ │
# └─┘╚═╝╰─╯
# Usage: echo "hallo" | box 
#
# Positional parameters:
# ----------------------
# bordercolor : 31:Red, 32:Green, 33:Yellow, 34:Blue, Magenta:35, Cyan:36, White:37
# Title       : Title in top border
# bordertype  : 0=plain, 3=double, 6=rounded
#
# shellcheck disable=all
box() {
  local contents=() max=$#2 T="┌─┐╔═╗╭─╮│││║║║│││└─┘╚═╝╰─╯" C="" R='\033[0m'; r=${3:-0};[[ -n "${1:-}" ]] && C="\033[1;${1}m"
  while IFS= read -r l; do contents+=("$l"); done # Works on Linux/mac/bash/zsh
  r() { printf "$1%.0s" $(seq 0 "$2"); }; b() { echo "${T:$1:1}"; }
	for line in "${contents[@]}"; do [[ "${#line}" -gt "$max" ]] && max=${#line}; done
  echo -e "$C$(b $3)$(b $(($3+1)))${2:-}$(r "$(b $(($3+1)))" "$((max - ${#2} + 1))")$(b $(($3+2)))$R"
  for line in "${contents[@]}"; do echo -e "$C$(b $(($3+9)))$R $line$(r " " $(( max - ${#line}))) $C$(b $(($3+9)))$R"; done
  echo -e "$C$(b $(($3+18)))$(r "${T:(($3+19)):1}" "$((max + 2))")$(b $(($3+20)))$R"
}
